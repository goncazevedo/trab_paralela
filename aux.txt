##############
ProcessInitialization(pMatrix, pVector, pResult, pProcRows, pProcVector, pProcResult, Size, RowNum);
##############
The function ProcessInitialization determines the initial data of the problem being solved (the number of
unknowns), allocates memory for storing the data, inputs the coefficient matrix of the linear equation system and the
vector of the right part (or it forms the data by means of random number generator). Function DataDistribution
distributes the data among the processors.

##############
ResultCollection(pProcResult, pResult);
##############
The function ResultCollection accumulates separate parts of the vector of the unknowns from all the
processes.

###############
ProcessTermination(pMatrix, pVector, pResult, pProcRows, pProcVector, pProcResult);
###############
The function ProcessTermination executes the necessary output of the results of problem solving and
releases all the previously allocated memory for storing the data.

##############
ParallelEliminateColumns(pProcRows, pProcVector, pPivotRow, Size, RowNum, i);
##############
The function ParallelEliminateColumns subtracts the pivot row from the process rows, which have not
been used as the pivot ones yet (i.e. rows for which the elements of the array pProcPivotIter are equal to zero).

##############
FindBackPivotRow(pParallelPivotPos[i], Size, IterProcRank, IterPivotPos);
##############
Calculating the rank of the process, which holds the pivot row

##############
TestResult(pMatrix, pVector, pResult, Size);
##############


ax +by = d
0 + by = e

a b e 
c d f